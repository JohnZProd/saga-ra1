Parameters:
  DBUser:
    Type: String
    Default: saga-dev
  DBAdmin:
    Type: String
    Default: admin
  DBUserPass:
    Type: String
  DBAdminPass:
    Type: String
  DBName:
    Type: String
    Default: saga
  DBEndpoint:
    Type: String
    Default: localhost

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16 
      EnableDnsHostnames: true
      EnableDnsSupport: true

  Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-southeast-2a"
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: ami-0ded330691a314693
      InstanceType: t3.medium
      KeyName: sydney
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref Subnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          export DB_USER=${DBUser}
          export DB_ADMIN=${DBAdmin}
          export DB_USER_PASS=${DBUserPass}
          export DB_ADMIN_PASS=${DBAdminPass}
          export DB_NAME=${DBName}
          export DB_ENDPOINT=${DBEndpoint}

          cat > /etc/environment << 'EOF'
          DB_USER=${DBUser}
          DB_ADMIN=${DBAdmin}
          DB_USER_PASS=${DBUserPass}
          DB_ADMIN_PASS=${DBAdminPass}
          DB_NAME=${DBName}
          DB_ENDPOINT=${DBEndpoint}
          EOF

          yum install -y git

          cat <<'EOF' >> /etc/yum.repos.d/mongodb-org-4.4.repo
          [mongodb-org-4.4]
          name=MongoDB Repository
          baseurl=https://repo.mongodb.org/yum/amazon/2/mongodb-org/4.4/x86_64/
          gpgcheck=1
          enabled=1
          gpgkey=https://www.mongodb.org/static/pgp/server-4.4.asc
          EOF
          
          yum install -y mongodb-org

          # Add git stuff
          git clone https://github.com/JohnZProd/saga-ra1.git
          
          systemctl start mongod
          systemctl enable mongod
          
          # Insert the mongo.conf file to /etc/
          rm -f /etc/mongod.conf
          cp -f saga-ra1/infrastructure/mongod.conf /etc/
          
          mongo --eval "db.createUser({user: '$DB_ADMIN',pwd: '$DB_ADMIN_PASS',roles: ['root']})" admin
          mongo --eval "db.createUser({user: '$DB_USER',pwd: '$DB_USER_PASS',roles: [{ role: 'readWrite', db:'$DB_NAME'}]})" $DB_NAME
          
          systemctl restart mongod

          # Install and config nginx
          amazon-linux-extras install nginx1 -y
          systemctl start nginx
          systemctl enable nginx

          cp saga-ra1/infrastructure/go-proxy.conf /etc/nginx/default.d/
          systemctl restart nginx

          # Install go
          yum install -y go
          # This command needs to be run as the app user
          sudo -u ec2-user go get go.mongodb.org/mongo-driver/mongo

          # Install python
          yum install -y python3
          pip3 install ultimate-sitemap-parser

          mkdir -p /var/app
          # Install code here and build
          # Ensure that it is chowned to execute the start script
          git clone https://github.com/JohnZProd/saga-recommender-api.git

          chown ec2-user saga-recommender-api/start.sh
          chmod +x saga-recommender-api/start.sh

          cp -R saga-recommender-api/ /var/app

          # Install the service
          cp saga-ra1/infrastructure/saga-recommender-api.service /etc/systemd/system/
          systemctl daemon-reload

          systemctl enable saga-recommender-api.service
          systemctl start saga-recommender-api

          # Migrate the db
          # From local (manually)

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Instance security group
      GroupName: InstanceSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
  
  VPCIGWAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCIGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet